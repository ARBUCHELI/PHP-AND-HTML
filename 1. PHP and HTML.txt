# PHP AND HTML
--------------

* Introduction
--------------
PHP can be used in many ways. It can be used to write standalone programs that run in our terminal:

echo "Hello, World!";

When run, the code above will output the following to the terminal:

Hello, World!

But PHP was designed as a back-end web development language—specifically it was designed to work well with HTML. PHP allowed a convenient way for developers to create HTML templates and 
programatically fill them out in order to send customized HTML to visitors of their sites.

PHP has evolved into a powerful programming language being used for more than templating HTML, but using PHP combined with HTML remains an important part of many web developers’ skill 
sets.

In this lesson, we’ll delve into the difference between the front-end and the back-end and learn how to use PHP to generate HTML. If you’d like a refresher on HTML check out these 
lessons. Otherwise let’s dive in!

index.html
----------
<!doctype html>
<html lang=en>
<head>
<meta charset=utf-8>
<title>A Static Site</title>
</head>
<body>
  <h1>Static?</h1>
  <p>We call this type of site static, because it never changes.</p>
  <p>Every time you visit this site, you see the same thing. If it was located on a public website, other users would also see the same thing.</p>
</body>
</html>

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* What is the Front-End?
------------------------
Let’s talk about the difference between a front-end language and a back-end language. HTML is a front-end language, but what exactly does that mean?

When navigating to a website from our web browser, the browser makes a request for content on our behalf. What we see and experience as a single website is actually composed of a number 
of files which come together to form a cohesive experience.

The files we receive consist of JavaScript, CSS, HTML, images, and other static assets. A static asset is a file that doesn’t change. When we navigate to a webpage, these assets are sent 
to a browser.

You may have heard front-end development referred to as client-side development. In web development, we are typically referring to the browser as the client. A human may be experiencing 
the website, but it’s the browser that makes requests for information and receives the responses.

The front-end of a website or web application consists of all the elements of the website that are sent to the client upon request. But something has to be listening for those requests 
and deciding what to send — it’s the back-end of the website that does all that and more.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* What is the Back-End?
-----------------------
The back-ends of websites will differ depending on the needs of the site. Typically, they’ll have at least the following components:

	1. A web server: a web server is a computer or program which listens for requests from clients and sends back responses. This component is well suited to handling delivery of 
	static content.

	2. An application server: this is actually often a collection of programming logic which is needed to deliver dynamic content to a client. The application server will often handle 
	other tasks such as site security and interacting with data.

	3. A data base: important information like usernames and passwords has to be stored and accessed somewhere. A large web application will often have multiple databases to store all 
	different types of data needed to run the site smoothly.

PHP can be used in many capacities in the back-end. However, in this lesson, we’ll get started small by focusing on one small role the PHP application server can play in generating HTML 
which the web server will send to a client.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* PHP in HTML
-------------
We can embed PHP scripts within HTML documents with the opening tag <?php and the closing tag ?>. The PHP processor will read the entire file, evaluate any PHP, translate it into HTML, 
and pass it off to the web server so it can be sent to the client.

Consider the following code:

<html>
 <head>
  <title>My First PHP Site</title>
 </head>
 <body>
 <?php 
    echo "<h1>Oh hi!</h1>"; 
  ?> 
 </body>
</html>

In the code above, the line echo "<h1>Oh hi!</h1>" will generate an HTML header of Oh hi!.

When we use echo within HTML we’re no longer printing to the terminal, rather we’re outputting to the HTML document.

Wouldn’t it have been simpler to just add <h1>Oh hi!</h1> directly? Yep. This example certainly doesn’t show us why we’d want to use PHP within our HTML. As we learn to develop more 
robust PHP scripts and harness some of the language’s more complex features, we’ll grow to understand how powerful it can be.

For now, let’s get a better understanding of how we can use PHP within HTML.

index.php
---------
<html>
<body>
<h1>PHP and HTML</h1>
<p>This is HTML</p>
<?php
  echo "<p>This is PHP</p>";
?>
</body>
</html>

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Beyond Strings
----------------
We can also incorporate more complex PHP within our scripts.

<?php
$lucky_number = 5 * 2 - 1;

echo "<h1>Your lucky number is ${lucky_number}</h1>";
?>

The code above will be translated into HTML with a header that reads: Your lucky number is 9.

We can incorporate all the language features we know about PHP, including functions:

<?php
function makeHeaderGreeting ($name){
  return "<h1>Hello, ${name}!</h1>";
}

echo makeHeaderGreeting("World");
?>

The code above will be translated into HTML with a header that reads: Hello, World!.

index.php
---------
<?php 
$about_me = [
  "name" => "Aisle Nevertell",
  "birth_year" => 1902,
  "favorite_food" => "pizza"
];

function calculateAge ($person_arr){
  $current_year = date("Y");
  $age = $current_year - $person_arr["birth_year"];
  return $age;
}
?>
<h1>Welcome!</h1>
<h2>About me:</h2>
<?php
#Add your code here
echo "<h3>Hello I am {$about_me["name"]}</h3>";
echo "<p>I am " . calculateAge($about_me) . " years old</p>";
echo "<div>My favorite food is {$about_me[favorite_food]}</div>";
?>

<h2>Now tell me a little about you.</h2>

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Review
--------
In this lesson, you’ve begun to learn how to use PHP to generate HTML. This will become even more powerful as we learn how to get information from the client and use that to create 
dynamic websites.

Let’s review what we’ve learned so far:

	. The front-end of a website consists of JavaScript, CSS, HTML, images, and other static assets sent to the client.

	. When we navigate to a website the browser is the client, and it sends a request to the back-end for all the assets needed to view and interact with the website.

	. The back-end consists of a web server and all the logic and data needed to create and maintain a website or web application.

	. PHP is a back-end language.

	. PHP can be used to generate HTML files.

	. We embed PHP scripts within HTML by inserting PHP code between the opening (<?php) and closing (?>) tags.

------------------------------------------------------------------------------------------------------------------------------------------------------------------





























