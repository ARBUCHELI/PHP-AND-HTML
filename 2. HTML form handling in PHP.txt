# HTML FORM HANDLING IN PHP
---------------------------

* Introduction
--------------
Presenting and interacting with HTML is one of the primary uses of PHP. Our server takes each PHP file (in our examples, this is index.php), and translates them into HTML to present to 
the client in their web browser.

This process allows for developers to create customized experiences for individual users.

PHP also provides the capability to handle input from users through HTML forms in a straightforward manner. Before we cover working with forms, take a minute to review how PHP code can be 
embedded into HTML:

<p>This HTML will get delivered as is</p>
<?php echo "<p>PHP interprets this and turns it into HTML</p>";?>
<p>This HTML will get delivered as is</p>

This example uses the PHP opening (<?php) and closing (?>) tags to insert PHP code. It uses echo to add text to the HTML. This practice is so common that PHP provides a shorthand syntax. 
Instead of using <?php echo to begin the statement, you can simply use <?=.

Our example becomes:

<p>This HTML will get delivered as is</p>
<?="<p>PHP interprets this and turns it into HTML</p>";?>
<p>This HTML will get delivered as is</p>

index.php
---------
<h1>Learning PHP and HTML</h1>
<p>This first paragraph is standard HTML</p>
<?= "<p>Let's insert some text into our HTML using PHP!</p>";?>
<p>This last paragraph is also standard HTML</p>

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Request Superglobals
----------------------
Since PHP was built with web development as a primary use case, it has functionality to ease processing of HTML requests. When the front end client makes a request to a backend PHP 
server, several superglobals related to the request are available to the PHP script. Superglobals are automatic global variables which are available in all scopes throughout a script.

The list of superglobals in PHP includes the following:

	. $GLOBALS
	. $_SERVER
	. $_GET
	. $_POST
	. $_FILES
	. $_COOKIE
	. $_SESSION
	. $_REQUEST
	. $_ENV

For this lesson, we are focusing on three of these:

	. $_GET - this contains an associative array of variables passed to the current script using query parameters in the URL
	. $_POST - this contains an associative array of variables passed to the current script using a form submitted using the “POST” method
	. $_REQUEST - this contains the contents of $_GET, $_POST, and $_COOKIE

index.php
---------
<html>

<body>
    $_REQUEST:
    <?php print_r($_REQUEST) ?>
    <br>
    $_GET:
    <?php print_r($_GET) ?>
    <br>
    $_POST:
    <?php print_r($_POST) ?>
    <form method="get">
        GET Form: <input type="text" name="get_name">
        <input type="submit" value="Submit GET">
    </form>
    <form method="post">
        POST Form: <input type="text" name="post_name">
        <input type="submit" value="Submit POST">
    </form>
    <a href="index.php">Reset</a>
</body>

</html>

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* GET Form Handling
-------------------
In HTML, setting a form’s method attribute to "get" specifies that you would like the form to be submitted using the GET method. When using this method, the form entries are passed as 
parameters in a URL query string.

For example, this is a request to www.codecademy.com with the URL parameters first (set to the value "ellen") and last (set to the value "richards"):

www.codecademy.com/?first=ellen&last=richards

The parameter names (first and last) come from the name attribute of each form input.

For example, the following form could be used to collect an individual’s name using the GET method:

<form method="get">
First name: <input type="text" name="first">
<br>
Last name: <input type="text" name="last">
<br>
<input type="submit" value="Submit Name">
</form>

When the form is submitted, the form data is available in the $_GET superglobal array. The data is also accessible using $_REQUEST if you do not care about which method was used by the 
client.

In our example, if a user typed “ellen” into the first input and “richards” into the last input, then print_r($_GET) would look like this:

Array ( [first] => ellen [last] => richards )

To echo the value of the first input, we pass the parameter name to the $_GET array like below:

<?=$_GET['first'];?>

index.php
---------
<html>
<body>
<form method='get'>
Country:
<input type="text" name="country">
<br>
Language:
<input type="text" name="language">
<br>
<input type="submit" value="Submit">
</form>
<br>
<p>Your language is: <?=$_GET['language']?></p>
<p>Your country is: <?=$_GET['country']?></p>
<a href="index.php">Reset</a>
</body>
</html>

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* POST Form Handling
--------------------
In HTML, setting a form’s method attribute to "post" specifies that you would like the form to be submitted using the POST method. When using POST to submit forms, you will not see the 
URL change. The form data is sent using the headers of the HTTP request instead of URL parameters.

To use the data from the form in PHP, each input needs to have a unique name attribute.

When the form is submitted, the input data is available in the $_POST superglobal. Similar to GET, it is also available in $_REQUEST.

For example, if a user typed “Katharine” into the first input and “McCormick” into the last input of this form:

<form method="post">
First name: <input type="text" name="first">
<br>
Last name: <input type="text" name="last">
<br>
<input type="submit" value="Submit Name">
</form>

The URL would not change and print_r($_POST) would look like this:

Array ( [first] => Katharine [last] => McCormick )

index.php
---------
<html>
<body>
<form method="post">
Favorite Color:
<input type="text" name="color">
<br>
Favorite Food:
<input type="text" name="food">
<br>
<input type="submit" value="Submit">
</form>
<br>
<p>Best food is: <?=$_POST["food"]?></p>
<p>Best color is: <?=$_POST["color"]?></p>
<a href="index.php">Reset</a>
</body>
</html>

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Using the "action" Attribute
------------------------------
Until now, we’ve been handling the response to the form submission on the same page as the form itself. Often times there is no need to present a user with the same form over and over 
again. It might make sense to move them to a new page or thank them for their submission.

This is where the action form attribute comes into play. Since we have not specified an action yet, HTML defaults to submitting the form data back to the same script that defined the 
form.

If you would like to have the user navigate to a new URL and handle the form input there, you can specify the URL in the form’s action attribute. Since the action attribute specifies a 
relative URL, you can also enter the name of a PHP file in the same directory as the current one.

For example, given this directory:

index.php
receive_form.php

To handle a form using receive_form.php from index.php, you would use the following:

<form method="get" action="receive_form.php">

This works for both GET and POST methods.

index.php
---------
<html>
<body>
<form method="get" action="greet_user.php">
First Name:
<input type="text" name="first">
<br>
Last Name:
<input type="text" name="last">
<br>
<input type="submit" value="Submit">
</form>

<a href="index.php">Reset</a>
</body>
</html>

greet_user.php
--------------
<html>
<body>
<p>Thanks!</p>
<p>Your name has been recorded as:</p>
<p><?=$_GET['first']." ".$_GET['last']?></p>
<a href="index.php">Reset</a>
</body>
</html>

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Review
--------
You’re ready to start handling forms in PHP!

To review:

	. <?= is shorthand for <?php echo.

	. PHP provides superglobals which can be accessed anywhere in the script.

	. $_GET is an associative array containing data from a GET request.

	. $_POST is an associative array containing data from a POST request.

	. $_REQUEST is an associative array containing data from both GET and POST requests. It should only be used if you don’t care which method was used.

	. The array keys in the PHP request superglobals are set by the name attributes in the HTML form, which need to be unique.

	. The action attribute is used to specify which file should handle data from the form request.

index.php
---------
Review
You’re ready to start handling forms in PHP!

To review:

<?= is shorthand for <?php echo.
PHP provides superglobals which can be accessed anywhere in the script.
$_GET is an associative array containing data from a GET request.
$_POST is an associative array containing data from a POST request.
$_REQUEST is an associative array containing data from both GET and POST requests. It should only be used if you don’t care which method was used.
The array keys in the PHP request superglobals are set by the name attributes in the HTML form, which need to be unique.
The action attribute is used to specify which file should handle data from the form request.

handle_get.php
--------------
<html>
<body>
<h1>handle_get.php</h1>
<h2>Superglobals:</h2>
$_REQUEST:
<?php print_r($_REQUEST)?>
<br>
$_GET:
<?php print_r($_GET)?>
<br>
$_POST:
<?php print_r($_POST)?>
<br>
<a href="index.php">Reset</a>
</body>
</html>

------------------------------------------------------------------------------------------------------------------------------------------------------------------



























